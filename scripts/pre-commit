#!/bin/bash
echo "Running Git hook to check branch naming"

DEV_BRANCH="develop"
BRANCH=$(git rev-parse --abbrev-ref HEAD)
REGEX="^(feature|fix|release)\/(KA)-([0-9]+)\/([a-z-]+)$"

# prevent direct commits to development branch
if [[ $BRANCH == "$DEV_BRANCH" ]]; then
  error_msg="Aborting commit, please do not commit directly to the develop branch, create a feature / fix branch first!"
  echo "$error_msg"
  exit 1
fi

# verify branch naming convention
if ! [[ $BRANCH =~ $REGEX ]]; then
  echo "Your commit was rejected due to an issue with the branch name"
  echo "Please rename your branch with '(feature|fix|release)/KA-XXX/lorem-ipsum syntax"
  exit 1
fi

echo "Branch naming all good! :)"

echo "Running Git hook to call PHP Code Sniffer"

PROJECT=$(php -r "echo dirname(dirname(dirname(realpath('$0'))));")
STAGED_FILES_CMD=$(git diff --cached --name-only --diff-filter=ACMR HEAD | grep \\.php)
UNSTAGED_FILES_CMD=$(git diff --name-only --diff-filter=ACMR | grep \\.php)

# Determine if a file list is passed
if [ "$#" -eq 1 ]; then
  oIFS=$IFS
  IFS='
    '
  SFILES="$1"
  IFS=$oIFS
fi

SFILES=${SFILES:-$STAGED_FILES_CMD}

STAGED_BUT_MODIFIED_FILES=$(php -r "\$sfiles=(explode(\"\\n\", '$SFILES'));\$usfiles=(explode(\"\\n\", '$UNSTAGED_FILES_CMD'));echo implode(\"\\n\",array_intersect(\$usfiles,\$sfiles));")

if [ -z "$STAGED_BUT_MODIFIED_FILES" ]; then
  echo "OK"
else
  echo "Files staged but then modified:\n"
  echo "${STAGED_BUT_MODIFIED_FILES}"
  exit 1
fi

echo "Checking PHP Lint..."
for FILE in $SFILES; do
  php -l -d display_errors=0 "$PROJECT"/"$FILE"
  if [ $? != 0 ]; then
    echo "Fix the error before commit."
    exit 1
  fi
  FILES="$FILES $PROJECT/$FILE"
done

if [ "$FILES" != "" ]; then
  echo "Running Code Sniffer."
  ./vendor/bin/phpcs --standard=PSR12 -n -p $FILES
  if [ $? != 0 ]; then
    echo "Fix the error before commit!"
    echo "Run"
    echo "  ./vendor/bin/phpcbf $FILES"
    echo "for automatic fix or fix it manually."
    exit 1
  fi
fi

echo "PHP Code Sniffer all good! :)"

exit $?
